name: Create Release on PR Merge

on:
  push:
    branches:
      - main
    paths:
      - 'src/**/*.rs'
      - 'Cargo.toml'

permissions:
  contents: write

jobs:
  build:
    uses: ./.github/workflows/build-game-binary.yml
    secrets: inherit

  create_release:
    name: Create Release and Upload Assets
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Create GitHub release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: release-${{ github.run_number }}-${{ github.sha }}
          release_name: "Release #${{ github.run_number }}"
          body: "Automatically generated release for run ${{ github.run_number }} (commit ${{ github.sha }})"
          draft: false
          prerelease: false

      - name: Check for artifacts
        id: check_artifacts
        run: |
          # Find all artifact files
          linux_binary=$(find dist/Pong-ubuntu-latest -type f \( -name 'rust-pong' -o -name 'Rust-Pong' \) -print -quit 2>/dev/null || true)
          macos_binary=$(find dist/Pong-macos-latest -type f \( -name 'rust-pong' -o -name 'Rust-Pong' \) -print -quit 2>/dev/null || true)
          windows_binary=$(find dist/Pong-windows-latest -type f \( -name 'rust-pong.exe' -o -name 'Rust-Pong.exe' \) -print -quit 2>/dev/null || true)

          # Set outputs
          {
            echo "has_linux=$([ -n "$linux_binary" ] && echo 'true' || echo 'false')"
            echo "has_macos=$([ -n "$macos_binary" ] && echo 'true' || echo 'false')"
            echo "has_windows=$([ -n "$windows_binary" ] && echo 'true' || echo 'false')"
            echo "linux_path=$linux_binary"
            echo "macos_path=$macos_binary"
            echo "windows_path=$windows_binary"
          } >>"$GITHUB_OUTPUT"

      - name: Upload Linux binary
        if: steps.check_artifacts.outputs.has_linux == 'true'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.check_artifacts.outputs.linux_path }}
          asset_name: rust-pong-linux
          asset_content_type: application/octet-stream

      - name: Upload macOS binary
        if: steps.check_artifacts.outputs.has_macos == 'true'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.check_artifacts.outputs.macos_path }}
          asset_name: rust-pong-macos
          asset_content_type: application/octet-stream

      - name: Upload Windows binary
        if: steps.check_artifacts.outputs.has_windows == 'true'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.check_artifacts.outputs.windows_path }}
          asset_name: rust-pong-windows.exe
          asset_content_type: application/octet-stream
